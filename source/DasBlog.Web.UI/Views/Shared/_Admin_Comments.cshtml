@using DasBlog.Web.Models.AdminViewModels

@inject IDasBlogSettings dasBlogSettings
@model DasBlogSettingsViewModel

<div class="d-flex flex-wrap mb-3">
    <div class="col-auto">
        @Html.CheckBoxFor(m => @Model.SiteConfig.EnableComments, new { @class = "form-check-input me-1" })
        @Html.LabelFor(m => @Model.SiteConfig.EnableComments, null, new { @class = "form-check-label me-3" })
    </div>
    <div class="col-auto">
        @Html.CheckBoxFor(m => @Model.SiteConfig.ShowCommentsWhenViewingEntry, new { @class = "form-check-input me-1" })
        @Html.LabelFor(m => @Model.SiteConfig.ShowCommentsWhenViewingEntry, null, new { @class = "form-check-label me-3" })
    </div>
</div>

<div class="col-md-4">
    <div class="form-check">
        @Html.CheckBoxFor(m => @Model.SiteConfig.EnableCommentDays, new { @class = "form-check-input" })
        @Html.LabelFor(m => @Model.SiteConfig.EnableCommentDays, null, new { @class = "col-check-label" })
    </div>
</div>

<div class="col-md-4 mb-3">
    <div class="form-floating">
        @Html.TextBoxFor(m => @Model.SiteConfig.DaysCommentsAllowed, null, new { @class = "form-control", id = "daysCommentsAllowed" })
        @Html.LabelFor(m => @Model.SiteConfig.DaysCommentsAllowed, null, new { @class = "form-label", @for = "daysCommentsAllowed" })
    </div>
    @Html.ValidationMessageFor(m => m.SiteConfig.DaysCommentsAllowed, null, new { @class = "text-danger" })
</div>

<div class="row gy-2 gx-3 align-items-md-start mb-3">
    <div class="col-sm-5">
        <div class="form-floating">
            @Html.TextBoxFor(m => @Model.SiteConfig.CheesySpamQ, null, new { @class = "form-control", id = "cheesySpamQ" })
            @Html.LabelFor(m => @Model.SiteConfig.CheesySpamQ, null, new { @class = "form-label", @for = "cheesySpamQ" })
        </div>
        @Html.ValidationMessageFor(m => m.SiteConfig.CheesySpamQ, null, new { @class = "text-danger" })
    </div>
    <div class="col-sm-5">
        <div class="form-floating">
            @Html.TextBoxFor(m => @Model.SiteConfig.CheesySpamA, null, new { @class = "form-control", id = "cheesySpamA" })
            @Html.LabelFor(m => @Model.SiteConfig.CheesySpamA, null, new { @class = "form-label", @for = "cheesySpamA" })
        </div>
        @Html.ValidationMessageFor(m => m.SiteConfig.CheesySpamA, null, new { @class = "text-danger" })
    </div>
</div>

<div class="col-md-4 mb-3">
    <div class="form-check">
        @Html.CheckBoxFor(m => @Model.SiteConfig.AllowMarkdownInComments, new { @class = "form-check-input" })
        @Html.LabelFor(m => @Model.SiteConfig.AllowMarkdownInComments, null, new { @class = "col-check-label" })
    </div>
    <div class="form-check">
        @Html.CheckBoxFor(m => @Model.SiteConfig.CommentsRequireApproval, new { @class = "form-check-input" })
        @Html.LabelFor(m => @Model.SiteConfig.CommentsRequireApproval, null, new { @class = "col-check-label col-sm-10" })
    </div>
</div>

<div class="col-md-12">
    @Html.CheckBoxFor(m => @Model.SiteConfig.EnableCaptcha, new { @class = "form-check-input" })
    @Html.LabelFor(m => @Model.SiteConfig.EnableCaptcha, null, new { @class = "col-check-label" })
</div>

<div class="row gy-2 gx-3 align-items-md-start">
    <div class="col-sm-4">
        <div class="form-floating">
            @Html.TextBoxFor(m => @Model.SiteConfig.RecaptchaMinimumScore, null, new { type = "number", step = "0.1", @class = "form-control", id = "recaptchaMinimumScore" })
            @Html.LabelFor(m => @Model.SiteConfig.RecaptchaMinimumScore, null, new { @class = "form-label", @for = "recaptchaMinimumScore" })
        </div>
        @Html.ValidationMessageFor(m => m.SiteConfig.RecaptchaMinimumScore, null, new { @class = "text-danger" })
    </div>
    <div class="col-sm-4">
        <div class="form-floating">
            @Html.TextBoxFor(m => @Model.SiteConfig.RecaptchaSiteKey, null, new { @class = "form-control", id = "recaptchaSiteKey" })
            @Html.LabelFor(m => @Model.SiteConfig.RecaptchaSiteKey, null, new { @class = "form-label", @for = "recaptchaSiteKey" })
        </div>
        @Html.ValidationMessageFor(m => m.SiteConfig.RecaptchaSiteKey, null, new { @class = "text-danger" })
    </div>
    <div class="col-sm-4">
        <div class="form-floating">
            @Html.TextBoxFor(m => @Model.SiteConfig.RecaptchaSecretKey, null, new { @class = "form-control", id = "recaptchaSecretKey" })
            @Html.LabelFor(m => @Model.SiteConfig.RecaptchaSecretKey, null, new { @class = "form-label", @for = "recaptchaSecretKey" })
        </div>
        @Html.ValidationMessageFor(m => m.SiteConfig.RecaptchaSecretKey, null, new { @class = "text-danger" })
    </div>
</div>

<div class="form-group row mb-3">
    @Html.LabelFor(m => @Model.SiteConfig.ValidCommentTags, null, new { @class = "col-form-label" })    
    <div class="dasblog-col-body col-sm-10">
        @for (var i = 0; i < @Model.SiteConfig.ValidCommentTags[0].Tag.Count; i++)
        {
            <input type="checkbox" asp-for="@Model.SiteConfig.ValidCommentTags[0].Tag[i].Allowed" />
            <input type="hidden" asp-for="@Model.SiteConfig.ValidCommentTags[0].Tag[i].Attributes" />
            <label asp-for="@Model.SiteConfig.ValidCommentTags[0].Tag[i].Allowed">@Model.SiteConfig.ValidCommentTags[0].Tag[i].Name</label>
            <input type="hidden" asp-for="@Model.SiteConfig.ValidCommentTags[0].Tag[i].Name" />
            <span style="display: inline-block; width: 1em;"></span>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const enableCaptchaCheckbox = document.querySelector('[id$="EnableCaptcha"]');
        const recaptchaFields = [
            document.getElementById('recaptchaMinimumScore'),
            document.getElementById('recaptchaSiteKey'),
            document.getElementById('recaptchaSecretKey')
        ];

        function toggleRecaptchaFields() {
            const isEnabled = enableCaptchaCheckbox.checked;
            recaptchaFields.forEach(field => {
                field.disabled = !isEnabled;
            });
        }

        // Initialize the state on page load
        toggleRecaptchaFields();

        // Add event listener to toggle fields on checkbox change
        enableCaptchaCheckbox.addEventListener('change', toggleRecaptchaFields);
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const enableCommentDaysCheckbox = document.querySelector('[id$="EnableCommentDays"]');
        const daysCommentsAllowedTextbox = document.getElementById('daysCommentsAllowed');

        function toggleDaysCommentsAllowed() {
            const isEnabled = enableCommentDaysCheckbox.checked;
            daysCommentsAllowedTextbox.disabled = !isEnabled;
        }

        // Initialize the state on page load
        toggleDaysCommentsAllowed();

        // Add event listener to toggle text box on checkbox change
        enableCommentDaysCheckbox.addEventListener('change', toggleDaysCommentsAllowed);
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const enableCommentsCheckbox = document.querySelector('[id$="EnableComments"]');
        // Select all inputs and selects except the EnableComments checkbox itself
        const allFormFields = Array.from(document.querySelectorAll('input, select, textarea'))
            .filter(el => el !== enableCommentsCheckbox);

        function toggleAllFields() {
            const enabled = enableCommentsCheckbox.checked;
            allFormFields.forEach(field => {
                // Only toggle if not already disabled by other logic
                if (enabled) {
                    // Re-enable, but let other scripts (e.g., captcha, comment days) handle their own logic
                    field.disabled = false;
                } else {
                    field.disabled = true;
                }
            });
            // After enabling, re-run other toggles to respect their own logic
            if (enabled) {
                if (typeof toggleRecaptchaFields === 'function') toggleRecaptchaFields();
                if (typeof toggleDaysCommentsAllowed === 'function') toggleDaysCommentsAllowed();
            }
        }

        // Initialize on page load
        toggleAllFields();
        // Listen for changes
        enableCommentsCheckbox.addEventListener('change', toggleAllFields);
    });
</script>
