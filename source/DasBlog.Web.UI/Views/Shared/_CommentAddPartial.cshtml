@using DasBlog.Core.Common;
@using DasBlog.Services;
@using Microsoft.Extensions.Options;
@using reCAPTCHA.AspNetCore;
@using reCAPTCHA.AspNetCore.Versions;
@model DasBlog.Web.Models.BlogViewModels.AddCommentViewModel
@inject IDasBlogSettings dasBlogSettings
@inject IOptions<RecaptchaSettings> RecaptchaSettings


<form asp-controller="post" asp-action="comments" method="post">
    <div class="post-new-comment">
        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="row gy-2 gx-3 align-items-md-start mb-3">
            <div class="col-sm-2">
                <div class="form-floating">
                    @Html.TextBoxFor(m => @Model.Name, null, new { @class = "form-control", id = "Name" })
                    @Html.LabelFor(m => @Model.Name, null, new { @class = "form-label", @for = "Name" })
                </div>
                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-floating">
                    @Html.TextBoxFor(m => @Model.Email, null, new { @class = "form-control", id = "Email" })
                    @Html.LabelFor(m => @Model.Email, null, new { @class = "form-label", @for = "Email" })
                </div>
                @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
            </div>
        </div>

        <div class="row gy-2 gx-3 align-items-md-start mb-3">
            <div class="col-sm-5">
                <div class="form-floating">
                    @Html.TextBoxFor(m => @Model.HomePage, null, new { @class = "form-control", id = "homePage" })
                    @Html.LabelFor(m => @Model.HomePage, null, new { @class = "form-label", @for = "homePage" })
                </div>
                @Html.ValidationMessageFor(m => m.HomePage, null, new { @class = "text-danger" })
            </div>
        </div>

        @if(!string.IsNullOrEmpty(dasBlogSettings.SiteConfiguration.CheesySpamQ) && !string.IsNullOrEmpty(dasBlogSettings.SiteConfiguration.CheesySpamA)
            && dasBlogSettings.SiteConfiguration.CheesySpamQ.Length > 0 && dasBlogSettings.SiteConfiguration.CheesySpamA.Length > 0)
        {
            <div class="row gy-2 gx-3 align-items-md-start mb-3">
                <div class="col-sm-3">
                    <div class="form-floating">
                        @Html.TextBoxFor(m => @Model.CheesyQuestionAnswered, null, new { @class = "form-control", id = "cheesyQuestionAnswered" })
                        <label for="cheesyQuestionAnswered" class="control-label">@dasBlogSettings.SiteConfiguration.CheesySpamQ</label>
                    </div>
                    
                </div>
            </div>
        }

        <div class="row gy-2 gx-3 align-items-md-start mb-3">
            <div class="col-sm-8">
                <div class="form-floating">
                    @Html.TextAreaFor(m => m.Content, new { @class = "form-control", id = "content", style = "height: 100px" })
                    @Html.LabelFor(m => @Model.Content, null, new { @class = "form-label", @for = "content" })
                </div>
                @Html.ValidationMessageFor(m => m.Content, null, new { @class = "text-danger" })
            </div>
        </div>

        @if(dasBlogSettings.SiteConfiguration.EnableCaptcha)
        {
            <div class="row gy-2 gx-3 align-items-md-start mb-3">
                <div class="col-sm-3">
                    <div class="form-floating">
                        @(Html.Recaptcha<RecaptchaV2Checkbox>(RecaptchaSettings?.Value))
                    </div>

                </div>
            </div>
        }

        <div class="row gy-2 gx-3 align-items-md-start mb-3">
            <div class="col-sm-2">
                <button type="submit" id="SaveContentButtonId" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.TargetEntryId)
</form>
