@using DasBlog.Core.Common
@using DasBlog.Web.Models.AccountViewModels
@using DasBlog.Web.Identity
@using Microsoft.AspNetCore.Identity
@model DasBlog.Web.Models.AccountViewModels.LoginViewModel
@inject SignInManager<DasBlogUser> SignInManager

@{
    ViewBag.Title = "Log In";
    Layout = "_Layout";
}

<div id="@Constants.LoginPageTestId" class="@Constants.PageTestIdClass"></div>
<h2>@ViewData["Title"]</h2>
<div class="row">
    <div class="col-md-8">
        <section>
            <form asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                <h4>Use a local account to log in.</h4>
                <hr />
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="form-group">
                    <label for="@Constants.Email" class="col-md-2 control-label">@Constants.Email</label>
                    <div class="col-md-10">
                        <input id="@Constants.Email" name="@Constants.Email" value="" class="form-control" />
                        @* value="Model.Email" causes an error when building the razor.
                           We're not using asp-for as that does not mix well with use of constants (rather than literal values).
                           This combination works ok for _CommentAddPartial.cshtml so why not here?
                           Hopefully time will tell.  Meanwhile users will have to retype email if the password is rejected. 
                        *@
                        <span asp-validation-for="@Constants.Email" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label for="@Constants.Password" class="col-md-2 control-label">@Constants.Password</label>
                    <div class="col-md-10">
                        <input id="@Constants.Password" name="@Constants.Password" value="" class="form-control" />
                        <span id="@Constants.PasswordValidationId" asp-validation-for="@Constants.Password" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="checkbox">
                            <label asp-for="RememberMe">
                                <input asp-for="RememberMe" />
                                @Html.DisplayNameFor(m => m.RememberMe)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button id="@Constants.LoginButtonId" type="submit" class="btn btn-default">Log in</button>
                    </div>
                </div>
            </form>
        </section>
    </div>

</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
