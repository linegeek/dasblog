# Build on multiple platforms - https://docs.microsoft.com/azure/devops/pipelines/get-started-multiplatform?view=azure-devops&WT.mc_id=devops-github-shboyer
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-18.04'
#    mac:
#      imageName: 'macos-10.13'
    windows:
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)
  #vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'

parameters:
- name: Version
  displayName: Version
  type: string
  default: 2.20

steps:
- task: UseDotNet@2
  displayName: Installing .NET Core 3.1
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: PowerShell@2
  displayName: Set Build Number
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "##vso[build.updatebuildnumber]${{ parameters.Version }}.$(Build.BuildId)"

- task: DotNetCoreCLI@2
  displayName: Restoring Packages for Solution
  inputs:
    command: restore
    projects: '**/*.sln'

- script: 'echo -e "$(Build.BuildNumber)\n$(Build.BuildId)" > .buildinfo.json'
  displayName: "Emit build number"
  workingDirectory: '$(Build.SourcesDirectory)/source/DasBlog.Web.UI'
  failOnStderr: true
  
- task: DotNetCoreCLI@2
  displayName: Building Solution
  inputs:
    command: build
    projects: '**/*.sln'
    arguments: '--no-restore --configuration $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber).0 -p:SourceRevisionId=$(Build.SourceVersion)'

- script: dotnet test source/DasBlog.Tests/UnitTests/ --logger trx;LogfileName=test_results.xml --results-directory $(System.DefaultWorkingDirectory)/test_results --filter Category=UnitTest
  displayName: Run Unit Tests on Windows
  condition: and(succeeded(), eq(variables['imageName'], 'windows-2019'))

- task: PublishTestResults@2
  displayName: Publish Test Results
  condition: and(always(), eq(variables['imageName'], 'windows-2019'))
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/test_results'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --self-contained --no-build --no-restore --version-suffix $(Build.BuildNumber)'
    zipAfterPublish: True

- task: PublishPipelineArtifact@1
  condition: and(succeeded(), eq(variables['imageName'], 'windows-2019'))
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: $(System.TeamProject)_$(Build.BuildNumber)
